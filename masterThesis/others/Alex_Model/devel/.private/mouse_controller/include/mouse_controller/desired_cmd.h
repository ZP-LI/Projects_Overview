// Generated by gencpp from file mouse_controller/desired_cmd.msg
// DO NOT EDIT!


#ifndef MOUSE_CONTROLLER_MESSAGE_DESIRED_CMD_H
#define MOUSE_CONTROLLER_MESSAGE_DESIRED_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mouse_controller
{
template <class ContainerAllocator>
struct desired_cmd_
{
  typedef desired_cmd_<ContainerAllocator> Type;

  desired_cmd_()
    : vel(0.0)
    , turn_rate(0.0)
    , buttons()  {
    }
  desired_cmd_(const ContainerAllocator& _alloc)
    : vel(0.0)
    , turn_rate(0.0)
    , buttons(_alloc)  {
  (void)_alloc;
    }



   typedef float _vel_type;
  _vel_type vel;

   typedef float _turn_rate_type;
  _turn_rate_type turn_rate;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _buttons_type;
  _buttons_type buttons;





  typedef boost::shared_ptr< ::mouse_controller::desired_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mouse_controller::desired_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct desired_cmd_

typedef ::mouse_controller::desired_cmd_<std::allocator<void> > desired_cmd;

typedef boost::shared_ptr< ::mouse_controller::desired_cmd > desired_cmdPtr;
typedef boost::shared_ptr< ::mouse_controller::desired_cmd const> desired_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mouse_controller::desired_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mouse_controller::desired_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mouse_controller::desired_cmd_<ContainerAllocator1> & lhs, const ::mouse_controller::desired_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.turn_rate == rhs.turn_rate &&
    lhs.buttons == rhs.buttons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mouse_controller::desired_cmd_<ContainerAllocator1> & lhs, const ::mouse_controller::desired_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mouse_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mouse_controller::desired_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mouse_controller::desired_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mouse_controller::desired_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mouse_controller::desired_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_controller::desired_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_controller::desired_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mouse_controller::desired_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ca41f915100349b7a4af3c164f6abe2";
  }

  static const char* value(const ::mouse_controller::desired_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ca41f915100349bULL;
  static const uint64_t static_value2 = 0x7a4af3c164f6abe2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mouse_controller::desired_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mouse_controller/desired_cmd";
  }

  static const char* value(const ::mouse_controller::desired_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mouse_controller::desired_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vel\n"
"float32 turn_rate\n"
"int32[] buttons\n"
;
  }

  static const char* value(const ::mouse_controller::desired_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mouse_controller::desired_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.turn_rate);
      stream.next(m.buttons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct desired_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mouse_controller::desired_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mouse_controller::desired_cmd_<ContainerAllocator>& v)
  {
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "turn_rate: ";
    Printer<float>::stream(s, indent + "  ", v.turn_rate);
    s << indent << "buttons[]" << std::endl;
    for (size_t i = 0; i < v.buttons.size(); ++i)
    {
      s << indent << "  buttons[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.buttons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOUSE_CONTROLLER_MESSAGE_DESIRED_CMD_H

// Generated by gencpp from file mouse_controller/mouse_sensors.msg
// DO NOT EDIT!


#ifndef MOUSE_CONTROLLER_MESSAGE_MOUSE_SENSORS_H
#define MOUSE_CONTROLLER_MESSAGE_MOUSE_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mouse_controller
{
template <class ContainerAllocator>
struct mouse_sensors_
{
  typedef mouse_sensors_<ContainerAllocator> Type;

  mouse_sensors_()
    : servo_pos_leg()
    , servo_pos_aux()
    , contact_sensors()
    , imu_sensor()  {
    }
  mouse_sensors_(const ContainerAllocator& _alloc)
    : servo_pos_leg(_alloc)
    , servo_pos_aux(_alloc)
    , contact_sensors(_alloc)
    , imu_sensor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _servo_pos_leg_type;
  _servo_pos_leg_type servo_pos_leg;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _servo_pos_aux_type;
  _servo_pos_aux_type servo_pos_aux;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _contact_sensors_type;
  _contact_sensors_type contact_sensors;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _imu_sensor_type;
  _imu_sensor_type imu_sensor;





  typedef boost::shared_ptr< ::mouse_controller::mouse_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mouse_controller::mouse_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct mouse_sensors_

typedef ::mouse_controller::mouse_sensors_<std::allocator<void> > mouse_sensors;

typedef boost::shared_ptr< ::mouse_controller::mouse_sensors > mouse_sensorsPtr;
typedef boost::shared_ptr< ::mouse_controller::mouse_sensors const> mouse_sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mouse_controller::mouse_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mouse_controller::mouse_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mouse_controller::mouse_sensors_<ContainerAllocator1> & lhs, const ::mouse_controller::mouse_sensors_<ContainerAllocator2> & rhs)
{
  return lhs.servo_pos_leg == rhs.servo_pos_leg &&
    lhs.servo_pos_aux == rhs.servo_pos_aux &&
    lhs.contact_sensors == rhs.contact_sensors &&
    lhs.imu_sensor == rhs.imu_sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mouse_controller::mouse_sensors_<ContainerAllocator1> & lhs, const ::mouse_controller::mouse_sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mouse_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mouse_controller::mouse_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mouse_controller::mouse_sensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_controller::mouse_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a3639d3aca39f506211e62a51b3df2b";
  }

  static const char* value(const ::mouse_controller::mouse_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a3639d3aca39f50ULL;
  static const uint64_t static_value2 = 0x6211e62a51b3df2bULL;
};

template<class ContainerAllocator>
struct DataType< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mouse_controller/mouse_sensors";
  }

  static const char* value(const ::mouse_controller::mouse_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] servo_pos_leg\n"
"float32[] servo_pos_aux\n"
"float32[] contact_sensors\n"
"float32[] imu_sensor\n"
;
  }

  static const char* value(const ::mouse_controller::mouse_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_pos_leg);
      stream.next(m.servo_pos_aux);
      stream.next(m.contact_sensors);
      stream.next(m.imu_sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mouse_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mouse_controller::mouse_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mouse_controller::mouse_sensors_<ContainerAllocator>& v)
  {
    s << indent << "servo_pos_leg[]" << std::endl;
    for (size_t i = 0; i < v.servo_pos_leg.size(); ++i)
    {
      s << indent << "  servo_pos_leg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.servo_pos_leg[i]);
    }
    s << indent << "servo_pos_aux[]" << std::endl;
    for (size_t i = 0; i < v.servo_pos_aux.size(); ++i)
    {
      s << indent << "  servo_pos_aux[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.servo_pos_aux[i]);
    }
    s << indent << "contact_sensors[]" << std::endl;
    for (size_t i = 0; i < v.contact_sensors.size(); ++i)
    {
      s << indent << "  contact_sensors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.contact_sensors[i]);
    }
    s << indent << "imu_sensor[]" << std::endl;
    for (size_t i = 0; i < v.imu_sensor.size(); ++i)
    {
      s << indent << "  imu_sensor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imu_sensor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOUSE_CONTROLLER_MESSAGE_MOUSE_SENSORS_H
